import * as React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';
import { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Area, AreaChart } from 'recharts';
import { TrendingUp, TrendingDown, Users, DollarSign, Activity, Calendar, Download, ArrowLeft, Clock, MapPin, User, UserPlus, Filter, FileType, Search, Info } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Input } from '@/components/ui/input';
import DashboardLayout from '@/components/layouts/DashboardLayout';

// Mock analytics data
const revenueData = [
  { month: 'Jan', revenue: 12400, students: 45, coaches: 8 },
  { month: 'Feb', revenue: 13200, students: 52, coaches: 9 },
  { month: 'Mar', revenue: 14800, students: 58, coaches: 10 },
  { month: 'Apr', revenue: 16200, students: 64, coaches: 11 },
  { month: 'May', revenue: 17500, students: 68, coaches: 12 },
  { month: 'Jun', revenue: 18900, students: 72, coaches: 12 }
];

const sportDistribution = [
  { sport: 'Soccer', students: 28, revenue: 8400, color: '#ef4444' },
  { sport: 'Basketball', students: 22, revenue: 6600, color: '#3b82f6' },
  { sport: 'Tennis', students: 15, revenue: 4500, color: '#10b981' },
  { sport: 'Swimming', students: 18, revenue: 5400, color: '#f59e0b' }
];

const paymentTrends = [
  { month: 'Jan', successful: 85, not_paid: 8, pending: 7 },
  { month: 'Feb', successful: 88, not_paid: 6, pending: 6 },
  { month: 'Mar', successful: 92, not_paid: 4, pending: 4 },
  { month: 'Apr', successful: 89, not_paid: 7, pending: 4 },
  { month: 'May', successful: 94, not_paid: 3, pending: 3 },
  { month: 'Jun', successful: 96, not_paid: 2, pending: 2 }
];

// Extended coach performance data (40 coaches)
const coachPerformance = [
  { id: 1, name: 'Coach Michael', students: 28, retention: 95, rating: 4.8, sport: 'Soccer' },
  { id: 2, name: 'Coach Sarah', students: 22, retention: 92, rating: 4.7, sport: 'Basketball' },
  { id: 3, name: 'Coach David', students: 15, retention: 88, rating: 4.6, sport: 'Tennis' },
  { id: 4, name: 'Coach Lisa', students: 18, retention: 94, rating: 4.9, sport: 'Swimming' },
  { id: 5, name: 'Coach James', students: 25, retention: 90, rating: 4.5, sport: 'Soccer' },
  // More coaches...
];

const attendanceData = [
  { date: '2024-01-01', present: 65, absent: 8, late: 4 },
  { date: '2024-01-02', present: 68, absent: 6, late: 3 },
  { date: '2024-01-03', present: 71, absent: 4, late: 2 },
  { date: '2024-01-04', present: 69, absent: 5, late: 3 },
  { date: '2024-01-05', present: 72, absent: 3, late: 2 },
  { date: '2024-01-06', present: 70, absent: 4, late: 3 },
  { date: '2024-01-07', present: 73, absent: 2, late: 2 }
];

// Mock coach attendance data
const coachAttendanceData = [
  { date: '2024-01-01', present: 35, absent: 3, late: 2 },
  { date: '2024-01-02', present: 37, absent: 2, late: 1 },
  { date: '2024-01-03', present: 36, absent: 3, late: 1 },
  { date: '2024-01-04', present: 38, absent: 1, late: 1 },
  { date: '2024-01-05', present: 39, absent: 1, late: 0 },
  { date: '2024-01-06', present: 37, absent: 2, late: 1 },
  { date: '2024-01-07', present: 38, absent: 1, late: 1 }
];

// Generate detailed student attendance
const generateStudentAttendance = () => {
  const students = [];
  const sports = ['Soccer', 'Basketball', 'Tennis', 'Swimming'];
  const firstNames = ['John', 'Sarah', 'Mike', 'Emma', 'Alex', 'Lisa', 'David', 'Sophie', 'Ryan', 'Anna'];
  const lastNames = ['Smith', 'Johnson', 'Davis', 'Wilson', 'Brown', 'Chen', 'Garcia', 'Miller', 'Taylor', 'Anderson'];
  
  for (let i = 0; i < 40; i++) {
    const firstName = firstNames[i % firstNames.length];
    const lastName = lastNames[Math.floor(i / firstNames.length) % lastNames.length];
    const present = Math.floor(Math.random() * 3) + 5; // 5-7 days
    const absent = Math.floor(Math.random() * 3); // 0-2 days
    const late = Math.floor(Math.random() * 2); // 0-1 days
    const total = present + absent + late;
    const attendanceRate = Math.round((present / total) * 100);
    
    students.push({
      name: `${firstName} ${lastName}`,
      sport: sports[i % sports.length],
      present,
      absent,
      late,
      attendanceRate
    });
  }
  return students;
};

// Generate detailed coach attendance
const generateCoachAttendance = () => {
  const coaches = [];
  const sports = ['Soccer', 'Basketball', 'Tennis', 'Swimming'];
  
  for (let i = 0; i < coachPerformance.length; i++) {
    const present = Math.floor(Math.random() * 2) + 6; // 6-7 days
    const absent = Math.floor(Math.random() * 2); // 0-1 days
    const late = Math.floor(Math.random() * 2); // 0-1 days
    const total = present + absent + late;
    const attendanceRate = Math.round((present / total) * 100);
    const avgHours = (Math.random() * 2 + 7).toFixed(1); // 7.0-9.0 hours
    
    coaches.push({
      name: coachPerformance[i]?.name || `Coach ${i + 1}`,
      sport: sports[i % sports.length],
      present,
      absent,
      late,
      attendanceRate,
      avgHours: parseFloat(avgHours)
    });
  }
  return coaches;
};

const studentAttendanceDetails = generateStudentAttendance();
const coachAttendanceDetails = generateCoachAttendance();

const chartConfig = {
  revenue: { label: 'Revenue', color: '#ef4444' },
  students: { label: 'Students', color: '#3b82f6' },
  coaches: { label: 'Coaches', color: '#10b981' },
  present: { label: 'Present', color: '#10b981' },
  absent: { label: 'Absent', color: '#ef4444' },
  late: { label: 'Late', color: '#f59e0b' },
  successful: { label: 'Successful', color: '#10b981' },
  not_paid: { label: 'Not Paid', color: '#ef4444' },
  pending: { label: 'Pending', color: '#f59e0b' }
};

interface AdminAnalyticsProps {
  onBack?: () => void;
}

const AdminAnalytics: React.FC<AdminAnalyticsProps> = ({ onBack }) => {
  const [attendanceView, setAttendanceView] = React.useState<'student' | 'coach'>('student');
  const [showCoachManagement, setShowCoachManagement] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState<boolean>(true);
  const [selectedDateRange, setSelectedDateRange] = React.useState<'week' | 'month' | 'quarter' | 'year'>('month');
  const [exportFormat, setExportFormat] = React.useState<'pdf' | 'csv'>('pdf');
  const [searchQuery, setSearchQuery] = React.useState('');
  
  // Simulate data loading
  React.useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 800);
    return () => clearTimeout(timer);
  }, []);
  
  // Derived metrics calculation
  const totalRevenue = revenueData.reduce((sum, item) => sum + item.revenue, 0);
  const totalStudents = Math.max(...revenueData.map(item => item.students));
  const revenueGrowth = ((revenueData[revenueData.length - 1].revenue - revenueData[0].revenue) / revenueData[0].revenue * 100).toFixed(1);
  const avgAttendance = ((attendanceData.reduce((sum, item) => sum + item.present, 0) / attendanceData.length) / (attendanceData[0].present + attendanceData[0].absent + attendanceData[0].late) * 100).toFixed(1);
  const totalCoaches = coachPerformance.length;
  const avgCoachRating = (coachPerformance.reduce((sum, coach) => sum + coach.rating, 0) / totalCoaches).toFixed(1);

  // Actions
  const handleAddCoach = () => {
    console.log('Add new coach');
  };

  const handleAssignStudents = (coachId: number) => {
    console.log('Assign students to coach:', coachId);
  };
  
  const handleExportReport = () => {
    console.log(`Exporting report in ${exportFormat} format`);
    // In a real implementation, we'd generate a PDF or CSV here
  };
  
  const handleDateRangeChange = (range: 'week' | 'month' | 'quarter' | 'year') => {
    setSelectedDateRange(range);
    setIsLoading(true);
    setTimeout(() => setIsLoading(false), 500);
  };

  return (
    <DashboardLayout 
      title="Analytics Dashboard" 
      userType="admin" 
      currentPath="/admin/analytics"
    >
      {/* Date Range Selector and Export Controls */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <div>
          <h2 className="text-xl font-bold">Performance Overview</h2>
          <p className="text-sm text-muted-foreground">Analyze your academy's key metrics and trends</p>
        </div>
        
        <div className="flex flex-wrap gap-2">
          <div className="flex bg-muted rounded-md overflow-hidden">
            {(['week', 'month', 'quarter', 'year'] as const).map((range) => (
              <Button 
                key={range}
                variant={selectedDateRange === range ? "default" : "ghost"}
                size="sm"
                onClick={() => handleDateRangeChange(range)}
                className="rounded-none h-9"
              >
                {range.charAt(0).toUpperCase() + range.slice(1)}
              </Button>
            ))}
          </div>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button 
                size="sm" 
                className="bg-green-600 hover:bg-green-700 h-9"
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => {
                setExportFormat('pdf');
                handleExportReport();
              }}>
                <FileType className="h-4 w-4 mr-2" /> 
                Export as PDF
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => {
                setExportFormat('csv');
                handleExportReport();
              }}>
                <FileType className="h-4 w-4 mr-2" /> 
                Export as CSV
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Key Metrics Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        {/* Revenue Card */}
        <Card className="overflow-hidden border-none shadow-md hover:shadow-lg transition-all">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Total Revenue</p>
                {isLoading ? (
                  <Skeleton className="h-8 w-28 mt-1" />
                ) : (
                  <div className="text-2xl font-bold">${totalRevenue.toLocaleString()}</div>
                )}
                <div className="flex items-center text-xs text-green-600 mt-1">
                  <TrendingUp className="h-3 w-3 mr-1" />
                  +{revenueGrowth}% growth
                </div>
              </div>
              <div className="rounded-full p-3 bg-red-100">
                <DollarSign className="h-6 w-6 text-red-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Students Card */}
        <Card className="overflow-hidden border-none shadow-md hover:shadow-lg transition-all">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Total Students</p>
                {isLoading ? (
                  <Skeleton className="h-8 w-20 mt-1" />
                ) : (
                  <div className="text-2xl font-bold">{totalStudents}</div>
                )}
                <div className="flex items-center text-xs text-green-600 mt-1">
                  <TrendingUp className="h-3 w-3 mr-1" />
                  +12% increase
                </div>
              </div>
              <div className="rounded-full p-3 bg-blue-100">
                <Users className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Attendance Card */}
        <Card className="overflow-hidden border-none shadow-md hover:shadow-lg transition-all">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Attendance Rate</p>
                {isLoading ? (
                  <Skeleton className="h-8 w-16 mt-1" />
                ) : (
                  <div className="text-2xl font-bold">{avgAttendance}%</div>
                )}
                <div className="flex items-center text-xs text-green-600 mt-1">
                  <TrendingUp className="h-3 w-3 mr-1" />
                  +3.2% this week
                </div>
              </div>
              <div className="rounded-full p-3 bg-green-100">
                <Activity className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Coach Card */}
        <Card className="overflow-hidden border-none shadow-md hover:shadow-lg transition-all">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">Coaches</p>
                {isLoading ? (
                  <Skeleton className="h-8 w-16 mt-1" />
                ) : (
                  <div className="text-2xl font-bold">{totalCoaches}</div>
                )}
                <div className="flex items-center text-xs text-green-600 mt-1">
                  <TrendingUp className="h-3 w-3 mr-1" />
                  +2 this month
                </div>
              </div>
              <div className="rounded-full p-3 bg-amber-100">
                <User className="h-6 w-6 text-amber-600" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <div className="relative flex-1">
          <Search className="h-4 w-4 absolute left-3 top-3 text-gray-400" />
          <Input 
            placeholder="Search coaches, students, activities..." 
            className="pl-9"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="icon" className="h-10 w-10">
              <Filter className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem>Filter by Sport</DropdownMenuItem>
            <DropdownMenuItem>Filter by Date</DropdownMenuItem>
            <DropdownMenuItem>Filter by Performance</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Analytics Tabs */}
      <Tabs defaultValue="revenue" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2 md:grid-cols-5 max-w-3xl">
          <TabsTrigger value="revenue">Revenue</TabsTrigger>
          <TabsTrigger value="students">Students</TabsTrigger>
          <TabsTrigger value="attendance">Attendance</TabsTrigger>
          <TabsTrigger value="payments">Payments</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
        </TabsList>

        {/* Revenue Analytics */}
        <TabsContent value="revenue" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Revenue Trend</CardTitle>
                <CardDescription>Monthly revenue growth over time</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : (
                  <ChartContainer config={chartConfig} className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <AreaChart data={revenueData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis />
                        <ChartTooltip content={<ChartTooltipContent />} />
                        <Area 
                          type="monotone" 
                          dataKey="revenue" 
                          stroke="#ef4444" 
                          fill="#ef4444" 
                          fillOpacity={0.3}
                        />
                      </AreaChart>
                    </ResponsiveContainer>
                  </ChartContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Revenue by Sport</CardTitle>
                <CardDescription>Revenue distribution across different sports</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : (
                  <ChartContainer config={chartConfig} className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={sportDistribution}
                          cx="50%"
                          cy="50%"
                          innerRadius={60}
                          outerRadius={120}
                          paddingAngle={5}
                          dataKey="revenue"
                          label={(entry: any) => `${entry.sport}: $${entry.revenue}`}
                        >
                          {sportDistribution.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <ChartTooltip content={<ChartTooltipContent />} />
                      </PieChart>
                    </ResponsiveContainer>
                  </ChartContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Student Analytics */}
        <TabsContent value="students" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Student Growth</CardTitle>
                <CardDescription>Student enrollment over time</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : (
                  <ChartContainer config={chartConfig} className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={revenueData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis />
                        <ChartTooltip content={<ChartTooltipContent />} />
                        <Line 
                          type="monotone" 
                          dataKey="students" 
                          stroke="#3b82f6" 
                          strokeWidth={3}
                          dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </ChartContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Students by Sport</CardTitle>
                <CardDescription>Distribution of students across sports</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : (
                  <ChartContainer config={chartConfig} className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={sportDistribution}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="sport" />
                        <YAxis />
                        <ChartTooltip content={<ChartTooltipContent />} />
                        <Bar dataKey="students" fill="#3b82f6" radius={[4, 4, 0, 0]} />
                      </BarChart>
                    </ResponsiveContainer>
                  </ChartContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Attendance Analytics */}
        <TabsContent value="attendance" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2">
                  <div>
                    <CardTitle>Attendance Trends</CardTitle>
                    <CardDescription>
                      {attendanceView === 'student' ? 'Daily student attendance patterns' : 'Daily coach attendance patterns'}
                    </CardDescription>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={attendanceView === 'coach'}
                        onCheckedChange={(checked) => setAttendanceView(checked ? 'coach' : 'student')}
                      />
                      <span className="text-sm font-medium">
                        {attendanceView === 'student' ? 'Students' : 'Coaches'}
                      </span>
                    </div>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : (
                  <ChartContainer config={chartConfig} className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <AreaChart data={attendanceView === 'student' ? attendanceData : coachAttendanceData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <ChartTooltip content={<ChartTooltipContent />} />
                        <Area 
                          type="monotone" 
                          dataKey="present" 
                          stackId="1"
                          stroke="#10b981" 
                          fill="#10b981" 
                        />
                        <Area 
                          type="monotone" 
                          dataKey="late" 
                          stackId="1"
                          stroke="#f59e0b" 
                          fill="#f59e0b" 
                        />
                        <Area 
                          type="monotone" 
                          dataKey="absent" 
                          stackId="1"
                          stroke="#ef4444" 
                          fill="#ef4444" 
                        />
                      </AreaChart>
                    </ResponsiveContainer>
                  </ChartContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>
                  {attendanceView === 'student' ? 'Student' : 'Coach'} Attendance Summary
                </CardTitle>
                <CardDescription>
                  Individual attendance records and rates
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="space-y-4">
                    {Array(5).fill(0).map((_, i) => (
                      <Skeleton key={i} className="h-16 w-full" />
                    ))}
                  </div>
                ) : (
                  <div className="space-y-4 max-h-[300px] overflow-y-auto">
                    {(attendanceView === 'student' ? studentAttendanceDetails : coachAttendanceDetails)
                      .slice(0, 10)
                      .map((person, index) => (
                        <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="space-y-1">
                            <h3 className="font-semibold text-sm">{person.name}</h3>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="text-xs">
                                {person.sport}
                              </Badge>
                              {'avgHours' in person && (
                                <div className="flex items-center space-x-1 text-xs text-gray-500">
                                  <Clock className="h-3 w-3" />
                                  <span>{person.avgHours}h avg</span>
                                </div>
                              )}
                            </div>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="flex items-center space-x-3 text-xs">
                              <div className="flex items-center space-x-1">
                                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                <span>{person.present}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                                <span>{person.late}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                                <span>{person.absent}</span>
                              </div>
                            </div>
                            <div className="text-sm font-medium">
                              {person.attendanceRate}% attendance
                            </div>
                          </div>
                        </div>
                      ))
                    }
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Payments Analytics */}
        <TabsContent value="payments" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Payment Trends</CardTitle>
              <CardDescription>Payment success and outstanding payments over time</CardDescription>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <Skeleton className="h-[300px] w-full" />
              ) : (
                <ChartContainer config={chartConfig} className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart data={paymentTrends}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <ChartTooltip content={<ChartTooltipContent />} />
                      <Area 
                        type="monotone" 
                        dataKey="successful" 
                        stackId="1"
                        stroke="#10b981" 
                        fill="#10b981" 
                      />
                      <Area 
                        type="monotone" 
                        dataKey="pending" 
                        stackId="1"
                        stroke="#f59e0b" 
                        fill="#f59e0b" 
                      />
                      <Area 
                        type="monotone" 
                        dataKey="not_paid" 
                        stackId="1"
                        stroke="#ef4444" 
                        fill="#ef4444" 
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                </ChartContainer>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Performance Analytics */}
        <TabsContent value="performance" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex flex-col sm:flex-row gap-4 justify-between">
                <div>
                  <CardTitle>Coach Performance</CardTitle>
                  <CardDescription>Coach effectiveness metrics and student assignments</CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Button onClick={handleAddCoach} size="sm" className="bg-blue-600 hover:bg-blue-700">
                    <UserPlus className="h-4 w-4 mr-2" />
                    Add Coach
                  </Button>
                  <Button
                    onClick={() => setShowCoachManagement(!showCoachManagement)}
                    variant="outline"
                    size="sm"
                  >
                    {showCoachManagement ? 'View Performance' : 'Manage Students'}
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="space-y-4">
                  {Array(5).fill(0).map((_, i) => (
                    <Skeleton key={i} className="h-16 w-full" />
                  ))}
                </div>
              ) : (
                <div className="space-y-4 max-h-[400px] overflow-y-auto">
                  <div className="text-sm text-gray-600 mb-4">
                    Showing 10 of {coachPerformance.length} coaches
                  </div>
                  {coachPerformance.slice(0, 10).map((coach, index) => (
                    <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <h3 className="font-semibold">{coach.name}</h3>
                        <div className="flex items-center space-x-2 mt-1">
                          <Badge variant="outline" className="text-xs">
                            {coach.sport}
                          </Badge>
                          <div className="text-xs text-gray-500">
                            {coach.students} students
                          </div>
                        </div>
                      </div>
                      <div className="flex flex-col sm:flex-row items-end sm:items-center gap-2 sm:gap-6">
                        <div className="text-sm">
                          <div className="font-medium">{coach.rating}/5.0</div>
                          <div className="text-xs text-gray-500">Rating</div>
                        </div>
                        <div className="text-sm">
                          <div className="font-medium">{coach.retention}%</div>
                          <div className="text-xs text-gray-500">Retention</div>
                        </div>
                        {showCoachManagement && (
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => handleAssignStudents(coach.id)}
                          >
                            Assign Students
                          </Button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </DashboardLayout>
  );
};

export default AdminAnalytics;
