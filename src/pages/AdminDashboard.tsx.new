import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Calendar } from '@/components/ui/calendar';
import { Input } from '@/components/ui/input';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Shield, MessageSquare, Calendar as CalendarIcon, UserPlus, CreditCard, Phone, Users, MapPin, Clock, Download, Activity, BarChart3, Search, Filter, Calculator, Bell } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { format, subDays, isWithinInterval } from 'date-fns';
import { cn } from '@/lib/utils';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import StudentRegistrationForm from '@/components/StudentRegistrationForm';
import ParentCredentialsCard from '@/components/ParentCredentialsCard';
import DrillActivityCard from '@/components/DrillActivityCard';
import DashboardLayout from '@/components/layouts/DashboardLayout';

// Mock data generation functions
const generateMockStudents = () => {
  const students = [];
  const sports = ['Soccer', 'Basketball', 'Tennis', 'Swimming'];
  const groups = ['Beginners', 'Intermediate', 'Advanced'];
  const paymentStatuses = ['paid', 'not_paid', 'upcoming'];
  const firstNames = ['John', 'Sarah', 'Mike', 'Emma', 'Alex', 'Lisa', 'David', 'Sophie', 'Ryan', 'Anna', 'Kevin', 'Rachel', 'Tom', 'Grace', 'Mark', 'Julia', 'Chris', 'Nina', 'Ben', 'Kate'];
  const lastNames = ['Smith', 'Johnson', 'Davis', 'Wilson', 'Brown', 'Chen', 'Garcia', 'Miller', 'Taylor', 'Anderson', 'White', 'Martinez', 'Lee', 'Thompson', 'Harris', 'Clark', 'Lewis', 'Walker', 'Hall', 'Young'];
  
  for (let i = 0; i < 40; i++) {
    const firstName = firstNames[i % firstNames.length];
    const lastName = lastNames[Math.floor(i / firstNames.length)];
    const sport = sports[i % sports.length];
    const group = groups[i % groups.length];
    const paymentStatus = paymentStatuses[i % paymentStatuses.length];
    
    students.push({
      id: i + 1,
      name: `${firstName} ${lastName}`,
      sport,
      feePlan: sport === 'Tennis' || sport === 'Swimming' ? 'Monthly - $200' : sport === 'Soccer' ? 'Monthly - $150' : 'Weekly - $40',
      paymentStatus,
      parentContact: `+123456${String(7890 + i).padStart(4, '0')}`,
      lastPayment: new Date(2024, 0, Math.floor(Math.random() * 30) + 1).toISOString().split('T')[0],
      group
    });
  }
  return students;
};

// Generate initial mock data
const mockStudents = generateMockStudents();

// Create payment logs based on students
const generateMockPaymentLogs = () => {
  const logs = [];
  const statuses = ['paid', 'not_paid', 'upcoming'];
  const amounts = ['$150', '$40', '$200', '$180'];
  
  for (let i = 0; i < mockStudents.length; i++) {
    logs.push({
      id: i + 1,
      studentName: mockStudents[i]?.name || `Student ${i + 1}`,
      amount: amounts[i % amounts.length],
      status: statuses[i % statuses.length],
      date: new Date(2024, 0, Math.floor(Math.random() * 30) + 1).toISOString().split('T')[0],
      method: 'Stripe'
    });
  }
  return logs;
};

// Generate other mock data
const mockPaymentLogs = generateMockPaymentLogs();

const generateMockWhatsAppLogs = () => {
  const logs = [];
  const messageTypes = ['Payment reminder sent', 'Session reminder sent', 'Schedule update notification', 'Welcome message sent', 'Attendance notification', 'Monthly report sent'];
  const statuses = ['delivered', 'pending'];
  
  for (let i = 0; i < mockStudents.length; i++) {
    logs.push({
      id: i + 1,
      studentName: mockStudents[i]?.name || `Student ${i + 1}`,
      message: messageTypes[i % messageTypes.length],
      status: statuses[i % statuses.length],
      date: new Date(2024, 0, Math.floor(Math.random() * 30) + 1).toISOString().split('T')[0]
    });
  }
  return logs;
};

const mockWhatsAppLogs = generateMockWhatsAppLogs();

const AdminDashboard = () => {
  const [selectedTab, setSelectedTab] = useState('overview');
  const [showRegisterForm, setShowRegisterForm] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  // Filter students by search query
  const filteredStudents = useMemo(() => {
    if (!searchQuery) return mockStudents;
    
    const query = searchQuery.toLowerCase();
    return mockStudents.filter(student => 
      student.name.toLowerCase().includes(query) || 
      student.sport.toLowerCase().includes(query) ||
      student.group.toLowerCase().includes(query)
    );
  }, [searchQuery, mockStudents]);

  // Functions
  const generateStudentReport = () => {
    const doc = new jsPDF();
    const tableColumn = ["ID", "Name", "Sport", "Group", "Payment Status", "Last Payment"];
    const tableRows: any[][] = [];

    filteredStudents.forEach(student => {
      const studentData = [
        student.id,
        student.name,
        student.sport,
        student.group,
        student.paymentStatus === 'paid' ? 'Paid' : student.paymentStatus === 'not_paid' ? 'Unpaid' : 'Upcoming',
        student.lastPayment
      ];
      tableRows.push(studentData);
    });

    doc.setFontSize(20);
    doc.text("Student Report", 14, 22);
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);
    
    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 35,
    });
    
    doc.save("student-report.pdf");
    
    toast({
      title: "Report Generated",
      description: "Student report has been downloaded successfully.",
    });
  };

  const handleRegisterNewStudent = () => {
    setShowRegisterForm(true);
  };

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
  };

  const handleAnalyticsClick = () => {
    // In a real app, this would navigate to analytics page
    toast({
      title: "Analytics",
      description: "Redirecting to analytics page...",
    });
  };

  return (
    <DashboardLayout
      title="Admin Dashboard"
      userType="admin"
      currentPath="/admin/dashboard"
    >
      {showRegisterForm ? (
        <StudentRegistrationForm onCancel={() => setShowRegisterForm(false)} />
      ) : (
        <>
          {/* Quick Actions */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <Card className="col-span-2">
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="flex flex-wrap gap-3">
                <Button 
                  className="bg-red-600 hover:bg-red-700 text-white" 
                  onClick={handleRegisterNewStudent}
                >
                  <UserPlus className="mr-2 h-4 w-4" />
                  Register New Student
                </Button>
                <Button 
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                  onClick={handleAnalyticsClick}
                >
                  <BarChart3 className="mr-2 h-4 w-4" />
                  View Analytics
                </Button>
                <Button
                  variant="outline"
                  onClick={generateStudentReport}
                >
                  <Download className="mr-2 h-4 w-4" />
                  Export Student Report
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Calendar</CardTitle>
                <CardDescription>View scheduled sessions</CardDescription>
              </CardHeader>
              <CardContent className="pt-0">
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  className="border rounded-md p-3"
                />
              </CardContent>
            </Card>
          </div>

          {/* Main content tabs */}
          <Tabs defaultValue="overview" value={selectedTab} onValueChange={setSelectedTab} className="space-y-4">
            <TabsList className="grid w-full grid-cols-1 md:grid-cols-4 lg:max-w-2xl">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="students">Students</TabsTrigger>
              <TabsTrigger value="payments">Payments</TabsTrigger>
              <TabsTrigger value="communications">Communications</TabsTrigger>
            </TabsList>
            
            {/* Dashboard Overview */}
            <TabsContent value="overview" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                {/* Stats Cards */}
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Total Students</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{mockStudents.length}</div>
                    <p className="text-xs text-muted-foreground mt-1">+12% from last month</p>
                    <div className="mt-4 flex items-center text-sm">
                      <Users className="mr-2 h-4 w-4 text-muted-foreground" />
                      Across 4 sports
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Payment Status</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">
                      {mockStudents.filter(s => s.paymentStatus === 'paid').length}/{mockStudents.length}
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">Payments received this month</p>
                    <div className="mt-4 flex items-center text-sm">
                      <CreditCard className="mr-2 h-4 w-4 text-muted-foreground" />
                      {mockStudents.filter(s => s.paymentStatus === 'not_paid').length} pending payments
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Today's Schedule</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">8</div>
                    <p className="text-xs text-muted-foreground mt-1">Active sessions today</p>
                    <div className="mt-4 flex items-center text-sm">
                      <Clock className="mr-2 h-4 w-4 text-muted-foreground" />
                      Next session at 4:00 PM
                    </div>
                  </CardContent>
                </Card>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Recent Activity</CardTitle>
                    <CardDescription>Last 5 system activities</CardDescription>
                  </CardHeader>
                  <CardContent className="max-h-[300px] overflow-auto">
                    <div className="space-y-4">
                      {mockPaymentLogs.slice(0, 5).map((log) => (
                        <div key={log.id} className="flex items-center justify-between p-2 border-b">
                          <div className="flex items-center">
                            <Activity className="h-4 w-4 mr-2 text-blue-600" />
                            <div>
                              <p className="text-sm font-medium">{log.studentName}</p>
                              <p className="text-xs text-muted-foreground">{log.date}</p>
                            </div>
                          </div>
                          <Badge variant={log.status === 'paid' ? 'default' : log.status === 'not_paid' ? 'destructive' : 'outline'}>
                            {log.status === 'paid' ? 'Payment Received' : log.status === 'not_paid' ? 'Payment Failed' : 'Upcoming'}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
                
                <ParentCredentialsCard />
              </div>
              
              <DrillActivityCard />
            </TabsContent>
            
            {/* Students Tab */}
            <TabsContent value="students" className="space-y-4">
              <div className="flex flex-col sm:flex-row gap-4 mb-4 justify-between">
                <div className="relative flex-1">
                  <Search className="h-4 w-4 absolute left-3 top-3 text-gray-400" />
                  <Input 
                    placeholder="Search students by name, sport or group..." 
                    className="pl-9"
                    value={searchQuery}
                    onChange={handleSearchChange}
                  />
                </div>
                <Button 
                  className="bg-red-600 hover:bg-red-700 text-white shrink-0" 
                  onClick={handleRegisterNewStudent}
                >
                  <UserPlus className="mr-2 h-4 w-4" />
                  New Student
                </Button>
              </div>
              
              <Card>
                <CardHeader>
                  <CardTitle>Students List</CardTitle>
                  <CardDescription>Showing {filteredStudents.length} of {mockStudents.length} students</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="rounded-md border">
                    <div className="grid grid-cols-6 font-medium p-3 bg-muted text-xs md:text-sm">
                      <div>Name</div>
                      <div>Sport</div>
                      <div>Group</div>
                      <div>Fee Plan</div>
                      <div>Last Payment</div>
                      <div className="text-right">Status</div>
                    </div>
                    <div className="divide-y max-h-[400px] overflow-auto">
                      {filteredStudents.map((student) => (
                        <div key={student.id} className="grid grid-cols-6 p-3 text-xs md:text-sm items-center">
                          <div className="font-medium">{student.name}</div>
                          <div>{student.sport}</div>
                          <div>{student.group}</div>
                          <div>{student.feePlan}</div>
                          <div>{student.lastPayment}</div>
                          <div className="text-right">
                            <Badge variant={student.paymentStatus === 'paid' ? 'default' : student.paymentStatus === 'not_paid' ? 'destructive' : 'outline'}>
                              {student.paymentStatus === 'paid' ? 'Paid' : student.paymentStatus === 'not_paid' ? 'Unpaid' : 'Upcoming'}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            {/* Payments Tab */}
            <TabsContent value="payments" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">$12,450</div>
                    <p className="text-xs text-muted-foreground mt-1">+8.2% from last month</p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Pending Payments</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{mockPaymentLogs.filter(p => p.status === 'not_paid').length}</div>
                    <p className="text-xs text-muted-foreground mt-1">-2 from yesterday</p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Payment Success Rate</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">
                      {Math.round((mockPaymentLogs.filter(p => p.status === 'paid').length / mockPaymentLogs.length) * 100)}%
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">+5% from last month</p>
                  </CardContent>
                </Card>
              </div>
              
              <Card>
                <CardHeader>
                  <CardTitle>Payment History</CardTitle>
                  <CardDescription>Recent student payments</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="rounded-md border">
                    <div className="grid grid-cols-5 font-medium p-3 bg-muted text-xs md:text-sm">
                      <div>Student</div>
                      <div>Date</div>
                      <div>Amount</div>
                      <div>Method</div>
                      <div className="text-right">Status</div>
                    </div>
                    <div className="divide-y max-h-[400px] overflow-auto">
                      {mockPaymentLogs.map((payment) => (
                        <div key={payment.id} className="grid grid-cols-5 p-3 text-xs md:text-sm items-center">
                          <div className="font-medium">{payment.studentName}</div>
                          <div>{payment.date}</div>
                          <div>{payment.amount}</div>
                          <div>{payment.method}</div>
                          <div className="text-right">
                            <Badge variant={payment.status === 'paid' ? 'default' : payment.status === 'not_paid' ? 'destructive' : 'outline'}>
                              {payment.status === 'paid' ? 'Paid' : payment.status === 'not_paid' ? 'Unpaid' : 'Upcoming'}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            {/* Communications Tab */}
            <TabsContent value="communications" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>WhatsApp Communication Logs</CardTitle>
                  <CardDescription>Recent messages sent to parents</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="rounded-md border">
                    <div className="grid grid-cols-4 font-medium p-3 bg-muted text-xs md:text-sm">
                      <div>Student</div>
                      <div>Message Type</div>
                      <div>Date</div>
                      <div className="text-right">Status</div>
                    </div>
                    <div className="divide-y max-h-[400px] overflow-auto">
                      {mockWhatsAppLogs.map((log) => (
                        <div key={log.id} className="grid grid-cols-4 p-3 text-xs md:text-sm items-center">
                          <div className="font-medium">{log.studentName}</div>
                          <div>{log.message}</div>
                          <div>{log.date}</div>
                          <div className="text-right">
                            <Badge variant={log.status === 'delivered' ? 'default' : 'outline'}>
                              {log.status === 'delivered' ? 'Delivered' : 'Pending'}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </>
      )}
    </DashboardLayout>
  );
};

export default AdminDashboard;
